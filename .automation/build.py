# !/usr/bin/env python3
"""
Automatically generate source code
"""

import superlinter


# Automatically generate a test class for each linter class
# This could be done dynamically at runtime, but having a physical class is easier for developers in IDEs
def generate_linter_test_classes():
    linter_classes = superlinter.SuperLinter.list_linter_classes()
    for linter_class in linter_classes:
        class_name = linter_class.__name__
        test_class_code = f"""# !/usr/bin/env python3
\"\"\"
Unit tests for {class_name} class
This class has been automatically generated by .automation/build.py, please do not update it manually
\"\"\"
import unittest

from superlinter.linters.{class_name} import {class_name}
from superlinter.tests.test_superlinter.helpers import utilstest


class {class_name}_test(unittest.TestCase):
    def setUp(self):
        utilstest.linter_test_setup()

    def test_success(self):
        utilstest.test_linter_success({class_name}(), self)

    def test_failure(self):
        utilstest.test_linter_failure({class_name}(), self)

    def test_get_linter_version(self):
        utilstest.test_get_linter_version({class_name}(), self)
"""
        file = open('./../superlinter/tests/test_superlinter/linters/' + class_name + '_test.py', 'w')
        file.write(test_class_code)
        file.close()


if __name__ == '__main__':
    # noinspection PyTypeChecker
    generate_linter_test_classes()
